name: Main

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  # windows:
  #   runs-on: windows-2022
  #   steps:
  #     # Clone repository
  #     - name: Check out repository
  #       uses: actions/checkout@v4
  #     # Set up caching
  #     - name: Set up Cabal cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           C:\cabal\packages
  #           C:\cabal\store
  #           dist-newstyle
  #         key: windows-cabal-${{ hashFiles('cabal.project') }}-${{ hashFiles('**/*.cabal') }}
  #     - name: Set up Cargo cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~\.cargo\bin
  #           ~\.cargo\registry\index
  #           ~\.cargo\registry\cache
  #           ~\.cargo\git\db
  #           opensolid-jit\target
  #         key: windows-cargo-${{ hashFiles('opensolid-jit/Cargo.*') }}
  #     # Install tooling
  #     - name: Install Rust toolchain
  #       run: |
  #         rustup install 1.80.1-x86_64-pc-windows-gnu
  #         rustup default 1.80.1-x86_64-pc-windows-gnu
  #     - name: Update Cabal package index
  #       run: |
  #         cabal update
  #     - name: Install uv
  #       run: |
  #         pipx install uv
  #     # Build and test
  #     - name: Build opensolid-jit library
  #       working-directory: opensolid-jit
  #       run: |
  #         cargo build --release
  #         echo "PATH=$env:PATH;$env:GITHUB_WORKSPACE\opensolid-jit\target\release" >> $env:GITHUB_ENV
  #     - name: Build opensolid library
  #       run: |
  #         cabal build opensolid
  #     - name: Run tests
  #       run: |
  #         cabal run sandbox
  #         cabal test opensolid
  #     - name: Build native library
  #       run: |
  #         cabal run generate-def-file
  #         cabal build opensolid-ffi
  #     - name: Build Python bindings
  #       run: |
  #         Copy-Item -Path .\opensolid-jit\target\release\opensolid_jit.dll -Destination .\opensolid-python\lib\src\opensolid\
  #         Get-ChildItem -Path dist-newstyle -Filter opensolid-ffi.dll -Recurse | Copy-Item -Destination .\opensolid-python\lib\src\opensolid\
  #         cabal run opensolid-python
  #     - name: Run test Python script
  #       working-directory: opensolid-python/lib
  #       run: |
  #         uv run check.py

  linux:
    runs-on: ubuntu-22.04
    steps:
      # Clone repository
      - name: Check out repository
        uses: actions/checkout@v4
      # Set up caching
      - name: Set up Cabal cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/cabal/packages
            ~/.local/state/cabal/store
            dist-newstyle
            opensolid/.hie
          key: linux-cabal-${{ hashFiles('cabal.project') }}-${{ hashFiles('**/*.cabal') }}
      - name: Set up Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            opensolid-jit/target
          key: linux-cargo-${{ hashFiles('opensolid-jit/Cargo.*') }}
      # Install uv
      - name: Install Python tooling
        run: |
          pipx install uv==0.5.6
          pipx install ruff==0.7.3
          pipx install auditwheel==6.1.0
      # Update Cabal index
      - name: Update Cabal index
        run: |
          cabal update
      # Check tool versions
      - name: Check tool versions
        run: |
          cargo --version
          rustc --version
          cabal --version
          ghc --version
      # Build and test
      - name: Build opensolid-jit library
        working-directory: opensolid-jit
        run: |
          cargo build --release
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/opensolid-jit/target/release" >> $GITHUB_ENV
      - name: Build opensolid library
        run: |
          cabal build opensolid
      - name: Run tests
        run: |
          cabal run sandbox
          cabal test opensolid
      - name: Build Python bindings
        run: |
          scripts/generate-python-bindings
      - name: Run test Python script
        run: |
          cd opensolid-python/lib
          uv run check.py
      - name: Build and fix wheel
        run: |
          cd opensolid-python/lib
          uv build --wheel
          auditwheel repair --plat manylinux_2_35_x86_64 dist/*.whl
      - name: Save wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          path: opensolid-python/lib/wheelhouse/*.whl
# jobs:
#   test:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         include:
#           # - os: ubuntu-latest
#           #   rust-target: x86_64-unknown-linux-gnu
#           - os: windows-2022
#             # Use MinGW instead of MSVC on Windows,
#             # for compatibility with Haskell compiler
#             # which is MinGW-based
#             rust-target: x86_64-pc-windows-gnu
#           # - os: macos-13
#           #   rust-target: x86_64-apple-darwin
#           # - os: macos-latest
#           #   rust-target: aarch64-apple-darwin
#     steps:
#       - uses: actions/checkout@v4
#       # Cache built Haskell dependencies
#       - uses: actions/cache@v4
#         name: Cache ~/.stack
#         with:
#           path: ~/.stack
#           key: ${{ matrix.os }}-stack-${{ hashFiles('stack.yaml') }}-${{ hashFiles('**/*.cabal') }}
#           restore-keys: ${{ matrix.os }}-stack
#       # Install Rust toolchain
#       - uses: dtolnay/rust-toolchain@master
#         with:
#           toolchain: 1.80.1-${{ matrix.rust-target }}
#       # Install Haskell toolchain
#       # - uses: haskell-actions/setup@v2
#       #   with:
#       #     enable-stack: true
#       #     ghc-version: 9.6.6
#       #     stack-version: 3.1.1
#       # Configure LIBRARY_PATH on Windows
#       - if: runner.os == 'Windows'
#         run: echo "LIBRARY_PATH=$env:GITHUB_WORKSPACE\\opensolid-jit\\target\\release" >> $GITHUB_ENV
#       # Build opensolid_jit library
#       - run: cargo build --release
#         working-directory: opensolid-jit
#       - name: Store built opensolid-jit binaries
#         uses: actions/upload-artifact@v4
#         with:
#           name: opensolid-jit-binaries-${{ matrix.os }}
#           path: opensolid-jit
#       # Build and test Haskell libraries
#       - run: stack build
#       - run: stack test
