Figure out why plates with holes couldn't generate...

Support default arguments in API?
-> Allow for 'Point2d()', 'Point2d(y=some_y_value)' etc. with unset coordinates defaulting to zero

Remove constants Length.millimeter etc. from API
-> interfere with autocomplete when trying to use e.g. Length.millimeters(...)

Have "high level" (Region2d, Body3d) functions just return 'Result Text a'?

Useful operations:
- Booleans on regions
- extract/query region/body curves, points, surfaces?

Generate non-zero normal vectors at poles of revolved surfaces

Add DirectionCurve2d.[rotateLeft,rotateRight] and use in Curve2d.offsetBy, Region2d.fillet

Add Meters (and Radians?) to OpenSolid.Prelude

Remove positiveX, negativeY etc.
-> can just write -Direction2d.x etc., or 'negate Direction2d.x' for extra obviousness

Remove 'xyzIn' etc. functions in favour of just using placeIn?
-> more flexible
-> generalizes to objects other than points/vectors
-> dedicated 'In' functions seem like a premature micro-optimization at this point...

Rename 'SM' to just 'S' in API? Unlikely to have other squared units exposed through API...

Add OpenSolid prefix to API modules

Use actual UvSpace/UvCoordinates in API module?

Add 'R' suffix versions of API factory* functions e.g. factory3R, factoryM2R, for factory functions that return Result values
-> then remove a few unnecessary 'forall's

Remove Drawing2d.Resolution, *or* use it everywhere
-> maybe have 'OpenSolid' be a context manager? 'with OpenSolid(tolerance=..., resolution=...):' etc.
  -> could support just setting tolerance *or* resolution at a time

Add Linear transformation types?
-> can only be used for vector types
-> rename Affine to Positioned or Positional similar?

Enforce frames to always be right-handed

Add Curve2d.centerPoint function?
-> check that evaluating center point from 3-point Gaussian quadrature points gives the same result, then return result for t=0.5
-> maybe other queries like Surface3d.normalDirection (useful for querying for e.g. "back face")

Reconsider having Axis2d.u, Point2d.uv etc. specialized constants/constructors?
-> maybe even move UvSpace into main CoordinateSystem module...and remove UvPoint etc. type aliases?

Have one generic Error type for Body3d construction?
-> or have separate error types, and e.g. map BoundedBy.Error to Extruded.Error by calling internalError for 'impossible' errors

Steiner point optimization: discard UV subdomains that touch an outer boundary of the overall domain bounding box but *don't* touch a boundary curve/edge
-> useful for thin regions, e.g. those resulting from domain stretching...

Search for Vector#d.unit calls and implement direct operations on Direction#d values directly where possible

Switch parametric types to only specialize for Parametric and Coerce
-> similarly, remove transformByImpl?

Implement curve reversal as composition with (1 - t)?
-> still efficient for parametric curves, which is the critical case
-> most curves that have an optimized reverse implementation are parametric anyways...

Refactor vector and direction types to have placeIn/relativeTo *only* support Basis#d?
-> not a big deal to have to call e.g. Frame3d.basis sometimes...and pretty explicit/clean
-> also removes ugliness with originPointUnits type parameter

Replace Range.from with just Range pattern?

Use direct constructors for primitives in more places
-> search for 'let (' to find places where coordinates/components are being used (or unnecessary parentheses in general)

General pass to make sure transformation functions are complete and consistent

Create monolithic OpenSolid.Functions module

Refactor Solve2d searching to use 'cross product' of Solve1d?

Verify behaviour of Curve2d intersection when curves are extensions of each other and meet only at an endpoint
-> rework overlap detection to be based on G2 continuity?

Have Domain.samplingPoints etc. return a 'Result InfiniteRecursion (NonEmpty Float)'?
Export to glTF

Refactor Surface3d.toMesh to match Body3d

Meshing improvements:
- Scale UV domain based on relative fuu and fvv magnitudes, so that e.g. cylinder gets triangulated as strip
- Or perhaps better: scale UV domain domain based on relative fu and fv magnitudes, to get better triangle aspect ratios?
- Properly handle UV domains with extreme aspect ratios: take overall bounds and have initial step that splits into square-ish segments?

Support Point3d + VectorSurfaceFunction3d -> SurfaceFunction3d

Have single Linearization module with curveError and surfaceError functions?

Add transformBy to all curve, surface and surface function types
-> then search for transformByImpl instances to see if they can be updated to use transformBy instead of Transformed constructors

Optimize Set2d to use 'nth element' algorithm?
- recursively search for bisection value to balance two sub-lists?

Rewrite scripts in Haskell?
-> or Python?
  -> Haskell better, might have multiple target languages but Haskell will still be primary for a long time...
-> first up: regenerating hie.yaml to use 'flib' for opensolid-ffi
  -> perhaps also combined script to add a new test executable and update hie.yaml

Build out publishing workflow
- Collect wheels and publish combined package
  - might need intermediate step to merge Mac wheels into universal one, or just build universal one to start with?
- Docs publishing: generate-python-docs then e.g. 'cp -r opensolid-python/lib/docs/build ../../opensolid/opensolid.github.io/docs/0.1.1'
- Wheel publishing: uvx twine upload wheelhouse/*

C API: generate structs with *named* fields
-> have the struct be named as function_name_inputs, function_name_outputs etc.
-> can use this in Python too, to have named fields instead of 'field0' etc.

Improve Python bindings
- Implement constructors?
- Make axes callable by a Float to give a point?
- Allow Python classes to be represented by things other than pointers (e.g. plain float values for quantity types)
- Add magic IPython display functions to Curve2d, Drawing2d.Entity etc.
  -> using to-SVG (and eventually to-glTF) Haskell functions under the hood? ('display' functions?)
- Actual error types instead of strings
- Add _list_decode helper?
- Add support for 'intersects' operator (^)
  -> Also (&) for *intersection*?
- Add extra line to docstring mentioning tolerance, if one is required
- Remove leading underscores from helper functions, now that we have __all__ to control exports?
- Add support for enums (new Winding type?)
- Add support for composition (special support for languages that support callable objects?)

Try using Pandoc to convert from Haddock to reStructuredText?
-> or just write all doc comments in plain text...
-> or use specialized direct Haddock conversion - most flexible
   -> e.g. convert type/function names to correct target language casing

Add support for Drawing2d.auto or similar, that computes an appropriate bounding box?
-> or perhaps a few different options for specifying canvas: Drawing2d.bounds, Drawing2d.padding etc.

Support spaces / coordinate systems in bindings

Try generating C# bindings?

Try generating C++ bindings?

Sandbox executable to start generating Region2d medial axis curves and points?
-> need to be able to solve for medial axis of curve and *point* first

Implement 1D monotonic solving in Rust

Specialize xComponent etc. for Parametric cases

Use space1 ~ space2 instead of space ~ space_ everywhere

Remove explicit use of unboxed Double# etc.?
- Just use {-# UNPACK #-} where necessary

Refactor Estimate to return an error if convergence fails/stalls

Optimizations to try:
- cache expressions on Rust side (per thread?)
- refactor JIT code to directly generate 'primop' style code directly callable from Haskell
- add CMM wrappers around C functions so they can be directly used as primops

Implement Subtraction for UTCTime instead of having Duration.from function
-> also allow adding or subtracting Duration from a UTCTime to get another UTCTime

Add specialized Region2d constructors for basic shapes
-> rectangle (Bounds2d), triangle, maybe circle?
