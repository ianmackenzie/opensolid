Switch Solve2d.return back to taking a single value instead of a NonEmpty

Move Http module out into separate opensolid-http package
-> reduce dependencies of libopensolid-ffi.so

Try publishing to PyPI
-> can start with test.pypi.org (using fake package name)
-> some combination of uv and cibuildwheel?

Improve Python bindings
- Nice __repr__ and/or __str__ for primitive types
- Add arithmetic operators (includig for Qty values)
- Add consructors/conversions to Qty modules based on values provided as part of API definition?
- Support lists
- Support 'in' operator?
- Support static functions that use a tolerance
- Add docstrings
- Define class (and quantity) members "in place" in class instance instead of separately?

Add 'compiled'/'processed' form of API definition for generating bindings?
- indexed functions
- functions represented more dynamically (e.g. lists of argument names/types)

Sandbox executable to start generating Region2d medial axis curves and points?
-> need to be able to solve for medial axis of curve and *point* first

Introduce curve function types and properly support piecewise curves

Switch types back to 'space @ units' instead of 'coordinateSystem' where possible?
-> if that makes coercion more expensive, specialize arithmetic operators instead

Implement 1D monotonic solving in Rust

Specialize xComponent etc. for Parametric cases

Move primitives to Primitives.hs

Use space1 ~ space2 instead of space ~ space_ everywhere

Refactor Estimate to return an error if convergence fails/stalls

Specialize Multiplication for primitive types, for performance
-> avoid units coercion and extra typeclass lookup

Optimizations to try:
- cache expressions on Rust side (per thread?)
- refactor JIT code to directly generate 'primop' style code directly callable from Haskell
- add CMM wrappers around C functions so they can be directly used as primops
