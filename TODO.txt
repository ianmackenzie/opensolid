Add Coercible constraint to CompiledFunction to enforce zero-overhead coercion?
-> similarly, enforce zero-overhead coercion of Expression type?

Add 'Abstract' constructor to Ast (or Expression?)

Rename CompiledFunction to Function.Compiled
-> or possibly Evaluator or similar?
  -> then might make sense to *not* implement Addition etc. for Evaluator, just use map2 (+) (+) (+) etc.

Support point/vector transformations in bytecode
Support discontinuities in bytecode
Add Ast3d
Add arithmetic typeclass instances to Ast2d and Ast3d

Update Curve.sqrt' and SurfaceFunction.sqrt' to use specialized square root derivative expression

Encode entire function as <u64 number of constants, constants, words>
-> only pin/marshal one ByteString instead of two
-> potentially allow functions to call other functions, by passing the single pointer as a 'function pointer'

Add Arc2d and Arc3d bytecode instructions

Remove 'planar' functions in favour of calling 'new' directly from 'placeOn' functions

Do a general pass of trimming down .hs-boot files?

Try requiring a specific coordinate system convention when using 'xyz' functions
-> implicit argument in Haskell, treated just like tolerance (except it's not passed _through_ anywhere)
-> 'Convention.using Convention.yUp' (X left, Z forward), 'Convention.using Convention.zUp' (X right, Y forward)
-> Conventions: right handed, Y or Z up, no cardinal directions point downward or backward
    Convention.yUp (alias for xLeftwardYUpwardZForward)
    Convention.zUp (alias for xRightwardYForwardZUpward)
    Convention.xLeftwardYUpwardZForward
    Convention.xRightwardYForwardZUpward
    Convention.xForwardYLeftwardZUpward
    Convention.xForwardYUpwardZRightward

Switch to 'perfect' units coercion for curves and surface function types
-> can coerce Haskell functions!

Check that function modules only refer to other function types, not geometry types

Special cases for arithmetic on mixed variable/constant Ast values
- e.g. 'a + (b + x)' -> (a + b) + x'

Special cases for spline types in Ast operations

Add translateX, translateY, translateZ

Replace 'CompiledFunction.abstract' with 'compileImpl' where applicable

Don't expose Parametric constructors

Remove constructors from .hs-boot files
-> in particular, curve/surface functions

Review all 'sqrt', 'magnitude', 'direction' and 'tangentDirection' functions to ensure correct degeneracy removal
-> get rid of 'unsafeMagnitude' functions and 'NonZeroMagnitude' types

Try removing 'unitless ~ Unitless' constraints everywhere
-> maybe also 'uvPoint ~ UvPoint', 'uvSpace ~ UvSpace', 'uvCoordinates ~ UvCoordinates'

Remove SymbolicOperators module once everything is switched to directly constructing curves/functions

Try defining API in terms of generic units and then *separately* a list of supported units?
-> C API could then just work on Float values
-> nicer mapping to F# (or potentially other languages with sufficiently powerful type systems that can represent units reasonably nicely)
-> could expose current 'flat' structure as convenience layer for languages that don't have good unit support (most of them)

Add Region2d.regularPolygon which takes number of sides and incircle diameter
-> corresponds to width across flats for polygons with even numbers of sides...
-> for polygon based on circumcircle: sample Curve2d.circle at N points:
   circle = Curve2d.circle point diameter
   Region2d.polygon [Curve2d.pointOn circle t | t <- Parameter.leading n]

Throw a Haskell exception for higher-order zeros in Curve solving
-> possibly also other truly 'exceptional' cases?
-> make sure to catch those exceptions in FFI...
-> probably still use a normal error type for second-or-higher order Curve2d intersections etc.
-> even Surface solving only solves for tangent roots though...
-> global rule that there should never be second or higher order intersection zeros/intersections?
  -> helps prevent constructing very complex third/fourth derivatives...

Ensure all quotient implementations use (p' / q) - (p / q) * (q' / q) form, to better support L'Hopital

Refactor Composition type parameter order to reflect . instead of >> use? (outer then inner)

Remove hasZero functions?

Create Haskell gear example and profile
- test case of cycloid curve starting right at base circle
  -> dump edges to see where there's a self-intersection, or try checking for zero-length edges ahead of time?
- implement trochoidal fillet

Check glTF sphere rendering

Improve curve linearization to take first-order bounds and even just zeroth-order bounds into account
-> behave better when second derivative is poorly conditioned

Have "high level" (Region2d, Body3d) functions just return 'Result Text a'?
-> call that a 'Try a' or 'Attempt a' or similar?

Remove Curve2d.cornerArc now that e.g. Region2d.fillet exists?
-> also add Curve2d.fillet to fillet curves at their (single) intersection point?

Useful operations:
- Booleans on regions
- extract/query region/body curves, points, surfaces?

Generate non-zero normal vectors at poles of revolved surfaces

Add DirectionCurve2d.[rotateLeft,rotateRight] and use in Curve2d.offsetBy, Region2d.fillet

When updating to GHC 9.12, try out NamedDefaults for Int, Float, Text?

Add OpenSolid prefix to API modules

Remove Drawing2d.Resolution, *or* use it everywhere
-> maybe have 'OpenSolid' be a context manager? 'with OpenSolid(tolerance=..., resolution=...):' etc.
  -> could support just setting tolerance *or* resolution at a time
  -> could also set default display units (tolerance, output_resolution, display_units...)

Add Linear transformation types?
-> can only be used for vector types
-> rename Affine to Positioned or Positional similar?

Add Curve2d.centerPoint function?
-> check that evaluating center point from 3-point Gaussian quadrature points gives the same result, then return result for t=0.5
-> maybe other queries like Surface3d.normalDirection (useful for querying for e.g. "back face")

Reconsider having Axis2d.u, Point2d.uv etc. specialized constants/constructors?
-> maybe even move UvSpace into main CoordinateSystem module...and remove UvPoint etc. type aliases?
-> simpler to just use Point2d constructor directly, instead of Point2d.uv

Have one generic Error type for Body3d construction?
-> or have separate error types, and e.g. map BoundedBy.Error to Extruded.Error by calling internalError for 'impossible' errors

Steiner point optimization: discard UV subdomains that touch an outer boundary of the overall domain bounding box but *don't* touch a boundary curve/edge
-> useful for thin regions, e.g. those resulting from domain stretching...

Search for Vector#d.unit calls and implement direct operations on Direction#d values directly where possible

Switch parametric types to only specialize for Parametric and Coerce
-> similarly, remove transformByImpl?

Implement curve reversal as composition with (1 - t)?
-> still efficient for parametric curves, which is the critical case
-> most curves that have an optimized reverse implementation are parametric anyways...

Use direct constructors for primitives in more places
-> search for 'let (' to find places where coordinates/components are being used (or unnecessary parentheses in general)

General pass to make sure transformation functions are complete and consistent

Refactor Solve2d searching to use 'cross product' of Solve1d?

Verify behaviour of Curve2d intersection when curves are extensions of each other and meet only at an endpoint
-> rework overlap detection to be based on G2 continuity?

Have Domain.samplingPoints etc. return a 'Result InfiniteRecursion (NonEmpty Float)'?

Refactor Surface3d.toMesh to match Body3d

Meshing improvements:
- Scale UV domain based on relative fuu and fvv magnitudes, so that e.g. cylinder gets triangulated as strip
- Or perhaps better: scale UV domain domain based on relative fu and fv magnitudes, to get better triangle aspect ratios?
- Properly handle UV domains with extreme aspect ratios: take overall bounds and have initial step that splits into square-ish segments?

Support Point3d + VectorSurfaceFunction3d -> SurfaceFunction3d

Have single Linearization module with curveError and surfaceError functions?

Add transformBy to all curve, surface and surface function types
-> then search for transformByImpl instances to see if they can be updated to use transformBy instead of Transformed constructors

Optimize Set2d to use 'nth element' algorithm?
- recursively search for bisection value to balance two sub-lists?

Rewrite scripts in Haskell?
-> or Python?
  -> Haskell better, might have multiple target languages but Haskell will still be primary for a long time...
-> first up: regenerating hie.yaml to use 'flib' for opensolid-ffi
  -> perhaps also combined script to add a new test executable and update hie.yaml

Build out publishing workflow
- Collect wheels and publish combined package
  - might need intermediate step to merge Mac wheels into universal one, or just build universal one to start with?
- Docs publishing: generate-python-docs then e.g. 'cp -r opensolid-python/lib/docs/build ../../opensolid/opensolid.github.io/docs/0.1.1'
- Wheel publishing: uvx twine upload wheelhouse/*

C API: generate structs with *named* fields
-> have the struct be named as function_name_inputs, function_name_outputs etc.
-> can use this in Python too, to have named fields instead of 'field0' etc.

Improve Python bindings
- Make axes callable by a Length to give a point?
- Allow Python classes to be represented by things other than pointers (e.g. plain float values for quantity types)
- Add magic IPython display functions to Curve2d, Drawing2d.Entity etc.
  -> using to-SVG (and eventually to-glTF) Haskell functions under the hood? ('display' functions?)
- Actual error types instead of strings
- Add _list_decode helper?
- Add support for 'intersects' operator (^)
  -> Also (&) for *intersection*?
- Add extra line to docstring mentioning tolerance, if one is required
- Remove leading underscores from helper functions, now that we have __all__ to control exports?
- Add support for enums (new Winding type?)
- Add support for composition (special support for languages that support callable objects?)

Try using Pandoc to convert from Haddock to reStructuredText?
-> or just write all doc comments in plain text...
-> or use specialized direct Haddock conversion - most flexible
   -> e.g. convert type/function names to correct target language casing

Add support for Drawing2d.auto or similar, that computes an appropriate bounding box?
-> or perhaps a few different options for specifying canvas: Drawing2d.bounds, Drawing2d.padding etc.

Support spaces / coordinate systems in bindings

Try generating C# bindings?

Try generating C++ bindings?

Sandbox executable to start generating Region2d medial axis curves and points?
-> need to be able to solve for medial axis of curve and *point* first

Implement 1D monotonic solving in C++

Use space1 ~ space2 instead of space ~ space_ everywhere

Refactor Estimate to return an error if convergence fails/stalls

Implement Subtraction for UTCTime instead of having Duration.from function
-> also allow adding or subtracting Duration from a UTCTime to get another UTCTime
