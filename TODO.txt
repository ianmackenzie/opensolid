Improve Python bindings
- Add constants as well as static functions?
  -> *Not* properties for now, leave those as member functions
- Try switching to pattern matching just on 'shape' of function arguments, with separate 'isinstance' checks
- Allow Python classes to be represented by things other than pointers (e.g. plain float values for quantity types)
- Rename __ptr__ to just _ptr
- Nice __repr__ and/or __str__, at least for primitive types
- Support 'in' operator?
- Add docstrings
- Actual error types instead of strings
- Add _list_decode helper?
- Get lists arguments working
  - allocate memory with opensolid_malloc
  - cast result to typed pointer with 'ctypes.cast(obj, type)'?
  - get/set elements with 'ptr[index]'
- Rename MemberFunction and StaticFunction to have U/R/M prefix *before* argument count
- Add support for // and % (DivMod)

Switch Solve2d.return back to taking a single value instead of a NonEmpty

Move Http module out into separate opensolid-http package
-> reduce dependencies of libopensolid-ffi.so

Try publishing to PyPI
-> can start with test.pypi.org (using fake package name)
-> some combination of uv and cibuildwheel?

Operator overload test suite: for every valid type and units combination, test that e.g. zero vector * zero range = zero vector bounds
- ensure every valid overload actually exists, and is resolved correctly at runtime

Try generating C# bindings?

Try generating C++ bindings?

Sandbox executable to start generating Region2d medial axis curves and points?
-> need to be able to solve for medial axis of curve and *point* first

Introduce curve function types and properly support piecewise curves

Switch types back to 'space @ units' instead of 'coordinateSystem' where possible?
-> if that makes coercion more expensive, specialize arithmetic operators instead

Implement 1D monotonic solving in Rust

Specialize xComponent etc. for Parametric cases

Move primitives to Primitives.hs

Use space1 ~ space2 instead of space ~ space_ everywhere

Refactor Estimate to return an error if convergence fails/stalls

Specialize Multiplication for primitive types, for performance
-> avoid units coercion and extra typeclass lookup

Optimizations to try:
- cache expressions on Rust side (per thread?)
- refactor JIT code to directly generate 'primop' style code directly callable from Haskell
- add CMM wrappers around C functions so they can be directly used as primops
